(()=>{"use strict";function l(t){if(console.log(`arr ${t}`),0==t.length)return[];if(1==t.length)return t;{let e=Math.floor(t.length/2),o=l(t.slice(e)),n=l(t.splice(0,t.length-o.length));console.log(`divide ${e}`),console.log(`right ${o}`),console.log(`left ${n}`);let r=[],a=0,i=0;for(let l=0;l<n.length+o.length;l++){if(console.log("in the for loop"),n[a]<o[i]?(console.log(`${n[a]} < ${o[i]}`),r[l]=n[a],a++):(r[l]=o[i],console.log(`${o[i]} < ${n[a]}`),i++),i==o.length)return console.log("end of right"),r=r.concat(n.slice(a)),console.log(r),r;if(a==n.length){console.log("end of left");let l=o.slice(i);return console.log(`${l} is left and is array? ${Array.isArray(l)}`),r=r.concat(l),console.log(r),r}}return console.log(r),r}}function t(l,t=null,e=null){return{data:l,left:t,right:e}}const e=(l,t="",o=!0)=>{null!==l&&(null!==l.right&&e(l.right,`${t}${o?"│   ":"    "}`,!1),console.log(`${t}${o?"└── ":"┌── "}${l.data}`),null!==l.left&&e(l.left,`${t}${o?"    ":"│   "}`,!0))};let o=function(){const o=(l,e=0,n=l.length-1)=>{if(e>n)return console.log("null!!!"),null;let r=parseInt((n+e)/2);console.log(`start ${e} value ${l[e]}`),console.log(`end ${n} value ${l[n]}`),console.log(`mid ${r} value ${l[r]}`);let a=t(l[r]);return a.left=o(l,e,r-1),a.right=o(l,r+1,n),console.log(`new node data is ${a.data}`),a};let n=(l=>{for(let t=0;t<l.length;t++)l[t]==l[t+1]&&l.splice(t,1);return l})(l([1,7,4,23,8,9,4,3,5,7,9,67,6345,324])),r=o(n),a=[];const i=(l,e=r)=>null==e?(e=t(l),console.log(`inserting ${l}... checkNode.data is ${e.data} and left is ${e.left}`),e):(l<e.data?e.left=i(l,e.left):l>e.data?e.right=i(l,e.right):l==e.data&&console.log("sorry can't insert, it already exists"),e),g=l=>null==l.left?(console.log(`leftmost leaf is ${l.data}`),l):g(l.left),s=(l,t=r)=>{if(null==t);else{if(t.data==l)return t;if(l<t.data)return s(l,t.left);if(l>t.data)return s(l,t.right)}},h=l=>{let t=[];return console.log(l.data),null==l.left&&null==l.right?(t=t.concat(l.data),t):(null!=l.left&&(t=t.concat(h(l.left))),t=t.concat(l.data),null!=l.right&&(t=t.concat(h(l.right))),console.log(t),t)},f=(l,t=r,o=r,n="")=>{if(console.log(`DeleteItem (${l},${t.data},${o.data},${n})`),t.data==l){if(null==t.left&&null==t.right)return console.log("its a leaf! lets delete it"),console.log(`direction is ${n}`),console.log(`prevNode is ${o.data}`),"right"==n?o.right=null:o.left=null,r;if(null!=t.left&&null==t.right)console.log("only has left subtree"),"right"==n?o.right=t.left:o.left=t.left;else if(null==t.left&&null!=t.right)console.log("only has right subtree"),"right"==n?(o.right=t.right,console.log(`${o.data}.right = ${t.data}.right`)):o.left=t.right;else if(null!=t.left&&null!=t.right){console.log("it has two subtrees!");let o=g(t.right);t.data=o.data,o.data=l,e(r),f(l,t.right,t,"right")}return r}l<t.data?f(l,t.left,t,"left"):l>t.data&&f(l,t.right,t,"right")},u=(l,t=[r])=>{if(null==l)throw new Error("you need a callback function");if(0!=t.length&&t!=[]){let e=t[0];l(e),null!=e.left&&t.push(e.left),null!=e.right&&t.push(e.right),t.shift(),u(l,t)}},c=(l,t=[r])=>{if(0!=t.length){let e=t[0];return l(e),t.shift(),null!=e.left&&(t.push(e.left),c(l,t)),void(null!=e.right&&(t.push(e.right),c(l,t)))}},d=(l,t=[r])=>{let e=t[t.length-1];if(null==e.left&&null==e.right)return l(e),void t.pop();null!=e.left&&(t.push(e.left),d(l,t)),l(e),t.pop(),null!=e.right&&(t.push(e.right),d(l,t))},$=(l,t=[r])=>{let e=t[t.length-1];null==e.left&&null==e.right?(l(e),t.pop()):(null!=e.left&&(t.push(e.left),$(l,t)),null!=e.right&&(t.push(e.right),$(l,t)),l(e),t.pop())},p=(l,t=0,e=0)=>(console.log(`count is ${t} maxcount is ${e} node is ${l.data}`),null==l.left&null==l.right?(t>e&&(e=t),t=0,e):(null!=l.left&&(t++,e=p(l.left,t,e),t=0),null!=l.right&&(t++,e=p(l.right,t,e),t=0),e)),b=(l,t=r,e=0)=>t==l?e:l.data>t.data?(e++,b(l,t.right,e)):l.data<t.data?(e++,b(l,t.left,e)):void 0,v=l=>{a.push(l.data)};return{root:r,insert:i,findLeftLeaf:g,find:s,treeToArray:h,deleteItem:f,levelOrder:u,preOrder:c,inOrder:d,postOrder:$,height:p,depth:b,isBalanced:()=>(console.log(`root.data ${r.data}`),!(Math.abs(p(r.right)-p(r.left))>1)),rebalance:()=>{a=[],d(v),console.log(a);let l=o(a);r.data=l.data,r.left=l.left,r.right=l.right}}}();o.insert(54),o.insert(55),o.insert(56),o.insert(57),o.insert(58),e(o.root),o.deleteItem(4),e(o.root),console.log(`is balanced ${o.isBalanced()}`),o.rebalance(),e(o.root),console.log(`is balanced ${o.isBalanced()}`)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,